//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kiritori.Properties {


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.14.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get { return defaultInstance; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Enable drop shadow effect on windows")]
        public bool WindowShadowEnabled
        {
            get { return ((bool)(this["WindowShadowEnabled"])); }
            set { this["WindowShadowEnabled"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Keep window always on top")]
        public bool AlwaysOnTop
        {
            get { return ((bool)(this["AlwaysOnTop"])); }
            set { this["AlwaysOnTop"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("100")]
        [global::System.ComponentModel.DescriptionAttribute("Window opacity percentage (10–100)")]
        public int WindowOpacityPercent
        {
            get { return ((int)(this["WindowOpacityPercent"])); }
            set { this["WindowOpacityPercent"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        [global::System.ComponentModel.DescriptionAttribute("Launch Kiritori at Windows startup")]
        public bool RunAtStartup
        {
            get { return ((bool)(this["RunAtStartup"])); }
            set { this["RunAtStartup"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("20")]
        [global::System.ComponentModel.DescriptionAttribute("Maximum number of history items to keep")]
        public int HistoryLimit
        {
            get { return ((int)(this["HistoryLimit"])); }
            set { this["HistoryLimit"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether first-run message was shown")]
        public bool FirstRunShown
        {
            get { return ((bool)(this["FirstRunShown"])); }
            set { this["FirstRunShown"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        [global::System.ComponentModel.DescriptionAttribute("Open Preferences window at application startup")]
        public bool OpenPreferencesOnStartup
        {
            get { return ((bool)(this["OpenPreferencesOnStartup"])); }
            set { this["OpenPreferencesOnStartup"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Display overlay elements in capture windows")]
        public bool OverlayEnabled
        {
            get { return ((bool)(this["OverlayEnabled"])); }
            set { this["OverlayEnabled"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Show guide lines during screen capture")]
        public bool ScreenGuideEnabled
        {
            get { return ((bool)(this["ScreenGuideEnabled"])); }
            set { this["ScreenGuideEnabled"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Highlight window when mouse hovers")]
        public bool HoverHighlightEnabled
        {
            get { return ((bool)(this["HoverHighlightEnabled"])); }
            set { this["HoverHighlightEnabled"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Cyan")]
        [global::System.ComponentModel.DescriptionAttribute("Highlight color for window hover")]
        public global::System.Drawing.Color HoverHighlightColor
        {
            get { return ((global::System.Drawing.Color)(this["HoverHighlightColor"])); }
            set { this["HoverHighlightColor"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("80")]
        [global::System.ComponentModel.DescriptionAttribute("Highlight alpha (%) for window hover")]
        public int HoverHighlightAlphaPercent
        {
            get { return ((int)(this["HoverHighlightAlphaPercent"])); }
            set { this["HoverHighlightAlphaPercent"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("6")]
        [global::System.ComponentModel.DescriptionAttribute("Highlight border thickness (px) for window hover")]
        public int HoverHighlightThickness
        {
            get { return ((int)(this["HoverHighlightThickness"])); }
            set { this["HoverHighlightThickness"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Black")]
        [global::System.ComponentModel.DescriptionAttribute("Background color behind captured region")]
        public global::System.Drawing.Color CaptureBackgroundColor
        {
            get { return ((global::System.Drawing.Color)(this["CaptureBackgroundColor"])); }
            set { this["CaptureBackgroundColor"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("60")]
        [global::System.ComponentModel.DescriptionAttribute("Background alpha (%) behind captured region")]
        public int CaptureBackgroundAlphaPercent
        {
            get { return ((int)(this["CaptureBackgroundAlphaPercent"])); }
            set { this["CaptureBackgroundAlphaPercent"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        [global::System.ComponentModel.DescriptionAttribute("Snap capture region to nearby edges/windows")]
        public bool SnapToEdgesEnabled
        {
            get { return ((bool)(this["SnapToEdgesEnabled"])); }
            set { this["SnapToEdgesEnabled"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        [global::System.ComponentModel.DescriptionAttribute("Play sound when capture completes")]
        public bool PlaySoundOnCapture
        {
            get { return ((bool)(this["PlaySoundOnCapture"])); }
            set { this["PlaySoundOnCapture"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        [global::System.ComponentModel.DescriptionAttribute("Show tray notification when capture completes")]
        public bool ShowNotificationOnCapture
        {
            get { return ((bool)(this["ShowNotificationOnCapture"])); }
            set { this["ShowNotificationOnCapture"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("en")]
        [global::System.ComponentModel.DescriptionAttribute("UI language code (e.g., en, ja)")]
        public string UICulture
        {
            get { return ((string)(this["UICulture"])); }
            set { this["UICulture"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ctrl+Shift+5")]
        [global::System.ComponentModel.DescriptionAttribute("Hotkey for image capture")]
        public string HotkeyCapture
        {
            get { return ((string)(this["HotkeyCapture"])); }
            set { this["HotkeyCapture"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ctrl+Shift+4")]
        [global::System.ComponentModel.DescriptionAttribute("Hotkey for OCR capture")]
        public string HotkeyOcr
        {
            get { return ((string)(this["HotkeyOcr"])); }
            set { this["HotkeyOcr"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Show tray notification when OCR completes")]
        public bool ShowNotificationOnOcr
        {
            get { return ((bool)(this["ShowNotificationOnOcr"])); }
            set { this["ShowNotificationOnOcr"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ctrl+Shift+6")]
        [global::System.ComponentModel.DescriptionAttribute("Hotkey to toggle Live Preview")]
        public string HotkeyLive
        {
            get { return ((string)(this["HotkeyLive"])); }
            set { this["HotkeyLive"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("15")]
        [global::System.ComponentModel.DescriptionAttribute("Maximum FPS for Live Preview rendering")]
        public int LivePreviewMaxFps
        {
            get { return ((int)(this["LivePreviewMaxFps"])); }
            set { this["LivePreviewMaxFps"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        [global::System.ComponentModel.DescriptionAttribute("Live Preview present policy (0=Always, 1=HashSkip, 2=Throttle)")]
        public int LivePreviewRenderPolicy
        {
            get { return ((int)(this["LivePreviewRenderPolicy"])); }
            set { this["LivePreviewRenderPolicy"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Enable the logging service")]
        public bool LogEnabled
        {
            get { return ((bool)(this["LogEnabled"])); }
            set { this["LogEnabled"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2")]
        [global::System.ComponentModel.DescriptionAttribute("Minimum log level (0=Trace, 1=Debug, 2=Info, 3=Warn, 4=Error)")]
        public int LogMinLevel
        {
            get { return ((int)(this["LogMinLevel"])); }
            set { this["LogMinLevel"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Write logs to Debug output")]
        public bool LogWriteToDebug
        {
            get { return ((bool)(this["LogWriteToDebug"])); }
            set { this["LogWriteToDebug"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Write logs to a file")]
        public bool LogWriteToFile
        {
            get { return ((bool)(this["LogWriteToFile"])); }
            set { this["LogWriteToFile"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        [global::System.ComponentModel.DescriptionAttribute("Custom log file path (empty to use default)")]
        public string LogFilePath
        {
            get { return ((string)(this["LogFilePath"])); }
            set { this["LogFilePath"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5242880")]
        [global::System.ComponentModel.DescriptionAttribute("Max log file size (bytes) before rolling")]
        public int LogMaxFileSizeBytes
        {
            get { return ((int)(this["LogMaxFileSizeBytes"])); }
            set { this["LogMaxFileSizeBytes"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        [global::System.ComponentModel.DescriptionAttribute("Number of rolled log files to keep")]
        public int LogMaxRollFiles
        {
            get { return ((int)(this["LogMaxRollFiles"])); }
            set { this["LogMaxRollFiles"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Include timestamp in each log entry")]
        public bool LogIncludeTimestamp
        {
            get { return ((bool)(this["LogIncludeTimestamp"])); }
            set { this["LogIncludeTimestamp"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        [global::System.ComponentModel.DescriptionAttribute("Include thread ID in each log entry")]
        public bool LogIncludeThreadId
        {
            get { return ((bool)(this["LogIncludeThreadId"])); }
            set { this["LogIncludeThreadId"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        [global::System.ComponentModel.DescriptionAttribute("Include process ID in each log entry")]
        public bool LogIncludeProcessId
        {
            get { return ((bool)(this["LogIncludeProcessId"])); }
            set { this["LogIncludeProcessId"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Include category tag in each log entry")]
        public bool LogIncludeCategoryTag
        {
            get { return ((bool)(this["LogIncludeCategoryTag"])); }
            set { this["LogIncludeCategoryTag"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("yyyy-MM-dd HH:mm:ss.fff")]
        [global::System.ComponentModel.DescriptionAttribute("Timestamp format string for logs")]
        public string LogTimestampFormat
        {
            get { return ((string)(this["LogTimestampFormat"])); }
            set { this["LogTimestampFormat"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Hide from screen captures for privacy")]
        public bool LivePreviewPrivacyMode {
            get { return ((bool)(this["LivePreviewPrivacyMode"])); }
            set { this["LivePreviewPrivacyMode"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("ja")]
        [global::System.ComponentModel.DescriptionAttribute("OCR language code (e.g., ja, en)")]
        public string OcrLanguage
        {
            get { return ((string)(this["OcrLanguage"])); }
            set { this["OcrLanguage"] = value; }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        [global::System.ComponentModel.DescriptionAttribute("Include OCR text in history items")]
        public bool HistoryIncludeOcr {
            get { return ((bool)(this["HistoryIncludeOcr"])); }
            set { this["HistoryIncludeOcr"] = value; }
        }
    }
}
